# Example configuration for Caddyfile Generator
# This is a sample configuration showing all available options

# Global Caddy settings
[global]
auto_https = false  # true to enable automatic HTTPS
admin = false       # true to enable admin API

# Logging configuration
[logging]
level = "INFO"      # Options: DEBUG, INFO, WARN, ERROR
format = "json"     # Options: json, console
output = "/var/log/caddy/caddy.log"

# TLS configuration
[tls]
enabled = false

[tls.ca]
enabled = false
root_cert = "/etc/ssl/ca.crt"
root_key = "/etc/ssl/ca.key"

# Example services configuration (these would be dynamically loaded)
# Note: The actual service configuration is currently hardcoded in the script
# This section shows what a future dynamic configuration might look like

[services.app]
enabled = true
domain = "app.example.com"
upstream = "http://192.168.1.100:3000"
access_log = "/var/log/caddy/app_access.log"

[services.app.features]
websocket = true
max_body_size = "100MB"

[services.media]
enabled = true
domain = "media.example.com"
upstream = "http://192.168.1.101:8080"
access_log = "/var/log/caddy/media_access.log"

[services.media.features]
caching = true
max_body_size = "50MB"

[services.api]
enabled = true
domain = "api.example.com"
upstream = "http://192.168.1.102:4000"
access_log = "/var/log/caddy/api_access.log"

[services.api.features]
rate_limiting = true
cors = true

[services.storage]
enabled = true
domain = "files.example.com"
upstream = "https://s3.example-region.amazonaws.com/example-bucket/"
access_log = "/var/log/caddy/storage_access.log"

[services.storage.features]
compression = true
caching = true
max_body_size = "1000MB"

[services.storage.headers]
host_override = "s3.example-region.amazonaws.com"
cache_control = "public, max-age=2592000"

# Layer 1 proxy configuration (entry point)
[proxy_layer1]
# Domains that bypass DDoS protection (anubis)
bypass_domains = [
    "media.example.com",
    "api.example.com",
    "files.example.com"
]

# Special path-based routing for main domain
[proxy_layer1.special_routing]
domain = "app.example.com"
bypass_paths = [
    "/streaming*",
    "/api*",
    "/inbox*",
    "/outbox*",
    "/.well-known*"
]

# DDoS protection service configuration
[ddos_protection]
service = "anubis"
port = 8080
upstream = "http://proxy-2:80"

# Example environment-specific overrides
[environments.development]
[environments.development.logging]
level = "DEBUG"

[environments.development.global]
admin = "localhost:2019"

[environments.staging]
[environments.staging.tls]
enabled = true

[environments.staging.logging]
level = "WARN"

[environments.production]
[environments.production.tls]
enabled = true

[environments.production.tls.ca]
enabled = true

[environments.production.logging]
level = "ERROR"