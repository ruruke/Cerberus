# HAProxy configuration for {{proxy.name}}
# Generated by Cerberus Rust edition
# Project: {{project_name}}

global
    log stdout local0 info
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Security settings
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+SHA256:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Performance tuning
    maxconn {{maxconn}}
    tune.ssl.default-dh-param 2048

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    retries 3
    
    # Timeouts
    timeout connect {{timeout_connect}}
    timeout client {{timeout_client}}
    timeout server {{timeout_server}}
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s

    # Health checks
    option httpchk GET /health
    http-check expect status 200

    # Security
    option forwardfor except 127.0.0.0/8
    option originalto

# Frontend configuration
frontend {{proxy.name}}_frontend
    bind *:{{external_port}}
    
    # Logging
    capture request header Host len 32
    capture request header User-Agent len 64
    capture response header Content-Type len 32
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response del-header Server

    # Health check endpoint
    http-request return status 200 content-type text/plain string "OK" if { path /health }
    
    # Metrics endpoint (deny access)
    http-request deny if { path_beg /metrics }

{{#if has_services}}
    # Service routing rules
{{#each services}}
    # Route for {{name}} ({{domain}})
    acl is_{{name}} hdr(host) -i {{domain}}
    use_backend {{name}}_backend if is_{{name}}

{{/each}}
{{/if}}

    # Default backend
    default_backend default_backend

    # Rate limiting (basic)
    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }

{{#if has_services}}
# Backend definitions for services
{{#each services}}
backend {{name}}_backend
    balance roundrobin
    option httpchk GET /health
    
    # Server configuration
    server {{name}}_1 {{upstream}} check inter 5s rise 2 fall 3 maxconn 300
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

{{/each}}
{{/if}}

# Default backend
backend default_backend
    balance roundrobin
    option httpchk GET /health
    
    # Extract server from upstream URL
    server default_1 {{upstream}} check inter 5s rise 2 fall 3 maxconn 300
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json
    
    # Stick sessions for consistency (if needed)
    # stick store-request src
    # stick match src

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats hide-version
    stats show-node
    stats show-legends
    stats realm HAProxy\ Statistics
    stats admin if TRUE

# Health check for the proxy itself
listen health_check
    bind *:8405
    mode http
    monitor-uri /health
    option dontlognull