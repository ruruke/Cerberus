# Traefik configuration for {{proxy.name}}
# Generated by Cerberus Rust edition
# Project: {{project_name}}

# Global configuration
global:
  checkNewVersion: false
  sendAnonymousUsage: false

# Entry points
entryPoints:
  web:
    address: ":{{external_port}}"
    http:
      # Security headers middleware
      middlewares:
        - security-headers@file
        - rate-limit@file

  # Health check endpoint
  health:
    address: ":8080"

# API and dashboard
api:
  dashboard: true
  insecure: true
  debug: false

# Metrics
metrics:
  prometheus:
    addEntryPointsLabels: true
    addServicesLabels: true
    entryPoint: health

# Logging
log:
  level: INFO
  filePath: "/var/log/traefik/{{proxy.name}}.log"
  format: json

accessLog:
  filePath: "/var/log/traefik/{{proxy.name}}_access.log"
  format: json
  fields:
    defaultMode: keep
    names:
      ClientUsername: drop
    headers:
      defaultMode: keep
      names:
        User-Agent: keep
        Authorization: drop
        Content-Type: keep

# Health check
ping:
  entryPoint: health

# Providers
providers:
  # File provider for static configuration
  file:
    directory: /etc/traefik/dynamic
    watch: true

# HTTP configuration
http:
  # Middlewares
  middlewares:
    # Security headers
    security-headers:
      headers:
        accessControlAllowMethods:
          - GET
          - OPTIONS
          - PUT
          - POST
          - DELETE
        accessControlMaxAge: 100
        hostsProxyHeaders:
          - "X-Forwarded-Host"
        referrerPolicy: "strict-origin-when-cross-origin"
        sslRedirect: false
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: "http"
        customResponseHeaders:
          X-Content-Type-Options: "nosniff"
          X-XSS-Protection: "1; mode=block"
        forceSTSHeader: true

    # Rate limiting
    rate-limit:
      rateLimit:
        average: 100
        burst: 200
        period: 1m

    # Compression
    compression:
      compress: {}

{{#if has_services}}
  # Services
  services:
{{#each services}}
    # Service: {{name}}
    {{name}}-service:
      loadBalancer:
        servers:
          - url: "{{upstream}}"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"
        sticky:
          cookie:
            name: "{{name}}_server"
            secure: false
            httpOnly: true

{{/each}}
{{/if}}

    # Default service
    default-service:
      loadBalancer:
        servers:
          - url: "{{upstream}}"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"

  # Routers
  routers:
{{#if has_services}}
{{#each services}}
    # Router for {{name}}
    {{name}}-router:
      rule: "Host(`{{domain}}`)"
      service: "{{name}}-service"
      entryPoints:
        - web
      middlewares:
        - security-headers
        - rate-limit
        - compression

{{/each}}
{{/if}}

    # Default router
    default-router:
      rule: "PathPrefix(`/`)"
      service: "default-service"
      entryPoints:
        - web
      middlewares:
        - security-headers
        - rate-limit
        - compression
      priority: 1

    # Health check router
    health-router:
      rule: "Path(`/health`)"
      service: "ping@internal"
      entryPoints:
        - web
      priority: 100

    # API router (for dashboard)
    api-router:
      rule: "Path(`/api`) || PathPrefix(`/dashboard`)"
      service: "api@internal"
      entryPoints:
        - health
      priority: 100

# TLS configuration (optional)
tls:
  options:
    default:
      minVersion: "VersionTLS12"
      cipherSuites:
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"