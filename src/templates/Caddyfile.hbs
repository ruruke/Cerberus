# Caddy configuration for {{proxy.name}}
# Generated by Cerberus Rust edition
# Project: {{project_name}}

{
	# Global options
	auto_https off
	admin off
	log {
		output file /var/log/caddy/{{proxy.name}}.log
		format json
	}
}

# Main server block
:{{external_port}} {
	# Enable access logging
	log {
		output file /var/log/caddy/{{proxy.name}}_access.log
		format json
	}

	# Health check endpoint
	respond /health 200 {
		body "OK"
		close
	}

	# Metrics endpoint (if enabled)
	respond /metrics/* 404

{{#if has_services}}
	# Service routing
{{#each services}}
	# Route for {{name}}
	@{{name}} host {{domain}}
	handle @{{name}} {
		reverse_proxy {{upstream}} {
			header_up Host {upstream_hostport}
			header_up X-Real-IP {remote}
			header_up X-Forwarded-For {remote}
			header_up X-Forwarded-Proto {scheme}
			header_up X-Forwarded-Host {host}
			
			# Health check
			health_uri /health
			health_interval 30s
			health_timeout 10s
			
			# Load balancing
			lb_policy round_robin
			
			# Retry configuration
			lb_try_duration 30s
			lb_try_interval 250ms
		}
	}

{{/each}}
{{/if}}

	# Default upstream (fallback)
	reverse_proxy {{upstream}} {
		header_up Host {upstream_hostport}
		header_up X-Real-IP {remote}
		header_up X-Forwarded-For {remote}
		header_up X-Forwarded-Proto {scheme}
		header_up X-Forwarded-Host {host}
		
		# Health check
		health_uri /health
		health_interval 30s
		health_timeout 10s
		
		# Load balancing
		lb_policy round_robin
		
		# Retry configuration
		lb_try_duration 30s
		lb_try_interval 250ms
	}

	# Security headers
	header {
		# HSTS
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
		
		# Prevent clickjacking
		X-Frame-Options "SAMEORIGIN"
		
		# XSS protection
		X-XSS-Protection "1; mode=block"
		
		# Content type sniffing protection
		X-Content-Type-Options "nosniff"
		
		# Referrer policy
		Referrer-Policy "strict-origin-when-cross-origin"
		
		# Remove server header
		-Server
	}

	# Rate limiting (basic)
	rate_limit {
		zone static_files {
			key {remote}
			events 100
			window 1m
		}
	}

	# Compression
	encode gzip zstd

	# Error handling
	handle_errors {
		@4xx expression `{err.status_code} >= 400 && {err.status_code} < 500`
		@5xx expression `{err.status_code} >= 500`
		
		handle @4xx {
			respond "Client Error: {err.status_code}" {err.status_code}
		}
		
		handle @5xx {
			respond "Server Error: {err.status_code}" {err.status_code}
		}
	}
}