//! Update script generator for automated Docker deployment
//!
//! This module generates shell scripts for automating Docker Compose deployment,
//! network management, and system updates.

use crate::config::Config;
use crate::error::Result;
use std::fs;
use std::path::Path;

/// Generator for update/deployment shell scripts
pub struct UpdateScriptGenerator<'a> {
    config: &'a Config,
}

impl<'a> UpdateScriptGenerator<'a> {
    /// Create a new update script generator
    pub fn new(config: &'a Config) -> Self {
        Self { config }
    }

    /// Generate update.sh script in the built directory
    pub fn generate(&self, output_dir: &Path) -> Result<()> {
        let script_content = self.generate_update_script()?;
        let script_path = output_dir.join("update.sh");
        
        fs::write(&script_path, script_content)?;
        
        // Make script executable
        #[cfg(unix)]
        {
            use std::os::unix::fs::PermissionsExt;
            let mut perms = fs::metadata(&script_path)?.permissions();
            perms.set_mode(0o755);
            fs::set_permissions(&script_path, perms)?;
        }
        
        Ok(())
    }

    /// Generate the update script content
    fn generate_update_script(&self) -> Result<String> {
        let mut script = String::new();
        
        // Script header
        script.push_str("#!/bin/bash\n");
        script.push_str("# Cerberus Auto-Update Script\n");
        script.push_str(&format!("# Generated by Cerberus Rust edition for project: {}\n", self.config.project.name));
        script.push_str("# This script automates Docker deployment and network management\n\n");
        
        // Color definitions
        script.push_str("# Color definitions\n");
        script.push_str("RED='\\033[0;31m'\n");
        script.push_str("GREEN='\\033[0;32m'\n");
        script.push_str("YELLOW='\\033[1;33m'\n");
        script.push_str("BLUE='\\033[0;34m'\n");
        script.push_str("NC='\\033[0m' # No Color\n\n");
        
        // Logging functions
        script.push_str("# Logging functions\n");
        script.push_str("log_info() {\n");
        script.push_str("    echo -e \"${BLUE}[INFO]${NC} $1\"\n");
        script.push_str("}\n\n");
        script.push_str("log_success() {\n");
        script.push_str("    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n");
        script.push_str("}\n\n");
        script.push_str("log_warning() {\n");
        script.push_str("    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n");
        script.push_str("}\n\n");
        script.push_str("log_error() {\n");
        script.push_str("    echo -e \"${RED}[ERROR]${NC} $1\"\n");
        script.push_str("}\n\n");
        
        // Error handling
        script.push_str("# Error handling\n");
        script.push_str("set -e\n");
        script.push_str("trap 'log_error \"Script failed at line $LINENO\"' ERR\n\n");
        
        // Project configuration
        script.push_str("# Project configuration\n");
        script.push_str(&format!("PROJECT_NAME=\"{}\"\n", self.config.project.name));
        script.push_str("SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n");
        script.push_str("COMPOSE_FILE=\"$SCRIPT_DIR/docker-compose.yaml\"\n\n");
        
        // Network management
        script.push_str("# Network management functions\n");
        script.push_str("cleanup_old_networks() {\n");
        script.push_str("    log_info \"Cleaning up old Docker networks...\"\n");
        script.push_str("    \n");
        script.push_str("    # Remove old cerberus networks if they exist\n");
        script.push_str("    docker network ls --filter name=cerberus --format \"{{.Name}}\" | while read -r network; do\n");
        script.push_str("        if [[ $network =~ ^cerberus- ]]; then\n");
        script.push_str("            log_info \"Removing network: $network\"\n");
        script.push_str("            docker network rm \"$network\" 2>/dev/null || log_warning \"Failed to remove $network (may not exist)\"\n");
        script.push_str("        fi\n");
        script.push_str("    done\n");
        script.push_str("}\n\n");
        
        // Container management
        script.push_str("stop_containers() {\n");
        script.push_str("    log_info \"Stopping existing containers...\"\n");
        script.push_str("    if [ -f \"$COMPOSE_FILE\" ]; then\n");
        script.push_str("        docker-compose -f \"$COMPOSE_FILE\" down --remove-orphans 2>/dev/null || true\n");
        script.push_str("    fi\n");
        script.push_str("    \n");
        script.push_str("    # Stop any running cerberus containers\n");
        script.push_str("    docker ps --filter label=cerberus.generated=true --format \"{{.Names}}\" | while read -r container; do\n");
        script.push_str("        if [[ -n $container ]]; then\n");
        script.push_str("            log_info \"Stopping container: $container\"\n");
        script.push_str("            docker stop \"$container\" 2>/dev/null || true\n");
        script.push_str("            docker rm \"$container\" 2>/dev/null || true\n");
        script.push_str("        fi\n");
        script.push_str("    done\n");
        script.push_str("}\n\n");
        
        // Image management
        script.push_str("build_images() {\n");
        script.push_str("    log_info \"Building Docker images...\"\n");
        script.push_str("    if [ -f \"$COMPOSE_FILE\" ]; then\n");
        script.push_str("        docker-compose -f \"$COMPOSE_FILE\" build --parallel\n");
        script.push_str("    else\n");
        script.push_str("        log_error \"Docker Compose file not found: $COMPOSE_FILE\"\n");
        script.push_str("        exit 1\n");
        script.push_str("    fi\n");
        script.push_str("}\n\n");
        
        // Health check function
        script.push_str("check_health() {\n");
        script.push_str("    log_info \"Checking service health...\"\n");
        script.push_str("    local timeout=60\n");
        script.push_str("    local count=0\n");
        script.push_str("    \n");
        script.push_str("    while [ $count -lt $timeout ]; do\n");
        script.push_str("        if docker-compose -f \"$COMPOSE_FILE\" ps | grep -q \"Up (healthy)\"; then\n");
        script.push_str("            log_success \"Services are healthy!\"\n");
        script.push_str("            return 0\n");
        script.push_str("        fi\n");
        script.push_str("        sleep 2\n");
        script.push_str("        count=$((count + 2))\n");
        script.push_str("        echo -n \".\"\n");
        script.push_str("    done\n");
        script.push_str("    \n");
        script.push_str("    log_warning \"Health check timeout reached\"\n");
        script.push_str("    docker-compose -f \"$COMPOSE_FILE\" ps\n");
        script.push_str("}\n\n");
        
        // Port conflict detection
        script.push_str("check_port_conflicts() {\n");
        script.push_str("    log_info \"Checking for port conflicts...\"\n");
        script.push_str("    \n");
        script.push_str("    local conflicts=0\n");
        if let Some(anubis) = &self.config.anubis {
            if anubis.enabled {
                script.push_str("    # Check Anubis ports\n");
                script.push_str("    if netstat -tlnp 2>/dev/null | grep -q ':8080\\|:9090'; then\n");
                script.push_str("        log_warning \"Port 8080 or 9090 already in use (Anubis ports)\"\n");
                script.push_str("        netstat -tlnp 2>/dev/null | grep ':8080\\|:9090' || true\n");
                script.push_str("        conflicts=1\n");
                script.push_str("    fi\n");
            }
        }
        
        for proxy in &self.config.proxies {
            if let Some(port) = proxy.external_port {
                script.push_str(&format!("    # Check proxy port {}\n", port));
                script.push_str(&format!("    if netstat -tlnp 2>/dev/null | grep -q ':{} '; then\n", port));
                script.push_str(&format!("        log_warning \"Port {} already in use (proxy: {})\"\n", port, proxy.name));
                script.push_str(&format!("        netstat -tlnp 2>/dev/null | grep ':{} ' || true\n", port));
                script.push_str("        conflicts=1\n");
                script.push_str("    fi\n");
            }
        }
        
        script.push_str("    \n");
        script.push_str("    if [ $conflicts -eq 1 ]; then\n");
        script.push_str("        log_warning \"Port conflicts detected. Continue anyway? (y/N)\"\n");
        script.push_str("        read -r response\n");
        script.push_str("        if [[ ! $response =~ ^[Yy]$ ]]; then\n");
        script.push_str("            log_info \"Aborted by user\"\n");
        script.push_str("            exit 1\n");
        script.push_str("        fi\n");
        script.push_str("    fi\n");
        script.push_str("}\n\n");
        
        // Main deployment function
        script.push_str("deploy() {\n");
        script.push_str("    log_info \"Starting Cerberus deployment...\"\n");
        script.push_str("    \n");
        script.push_str("    # Pre-deployment checks\n");
        script.push_str("    check_port_conflicts\n");
        script.push_str("    \n");
        script.push_str("    # Stop existing services\n");
        script.push_str("    stop_containers\n");
        script.push_str("    \n");
        script.push_str("    # Clean up networks\n");
        script.push_str("    cleanup_old_networks\n");
        script.push_str("    \n");
        script.push_str("    # Build and start services\n");
        script.push_str("    build_images\n");
        script.push_str("    \n");
        script.push_str("    log_info \"Starting services...\"\n");
        script.push_str("    docker-compose -f \"$COMPOSE_FILE\" up -d\n");
        script.push_str("    \n");
        script.push_str("    # Health check\n");
        script.push_str("    check_health\n");
        script.push_str("    \n");
        script.push_str("    log_success \"Deployment completed successfully!\"\n");
        script.push_str("    docker-compose -f \"$COMPOSE_FILE\" ps\n");
        script.push_str("}\n\n");
        
        // Status function
        script.push_str("status() {\n");
        script.push_str("    log_info \"Cerberus service status:\"\n");
        script.push_str("    docker-compose -f \"$COMPOSE_FILE\" ps\n");
        script.push_str("    echo\n");
        script.push_str("    log_info \"Network status:\"\n");
        script.push_str("    docker network ls --filter name=cerberus\n");
        script.push_str("}\n\n");
        
        // Logs function
        script.push_str("show_logs() {\n");
        script.push_str("    local service=\"$1\"\n");
        script.push_str("    if [[ -n $service ]]; then\n");
        script.push_str("        docker-compose -f \"$COMPOSE_FILE\" logs -f \"$service\"\n");
        script.push_str("    else\n");
        script.push_str("        docker-compose -f \"$COMPOSE_FILE\" logs -f\n");
        script.push_str("    fi\n");
        script.push_str("}\n\n");
        
        // Help function
        script.push_str("show_help() {\n");
        script.push_str("    echo \"Cerberus Update Script\"\n");
        script.push_str("    echo\n");
        script.push_str("    echo \"Usage: $0 [COMMAND]\"\n");
        script.push_str("    echo\n");
        script.push_str("    echo \"Commands:\"\n");
        script.push_str("    echo \"  deploy    Deploy Cerberus services (default)\"\n");
        script.push_str("    echo \"  status    Show service status\"\n");
        script.push_str("    echo \"  stop      Stop all services\"\n");
        script.push_str("    echo \"  logs      Show logs [service]\"\n");
        script.push_str("    echo \"  cleanup   Clean up networks and containers\"\n");
        script.push_str("    echo \"  help      Show this help\"\n");
        script.push_str("    echo\n");
        script.push_str("    echo \"Examples:\"\n");
        script.push_str("    echo \"  $0                # Deploy services\"\n");
        script.push_str("    echo \"  $0 status         # Show status\"\n");
        script.push_str("    echo \"  $0 logs anubis    # Show Anubis logs\"\n");
        script.push_str("}\n\n");
        
        // Main script logic
        script.push_str("# Main script logic\n");
        script.push_str("case \"${1:-deploy}\" in\n");
        script.push_str("    deploy)\n");
        script.push_str("        deploy\n");
        script.push_str("        ;;\n");
        script.push_str("    status)\n");
        script.push_str("        status\n");
        script.push_str("        ;;\n");
        script.push_str("    stop)\n");
        script.push_str("        stop_containers\n");
        script.push_str("        ;;\n");
        script.push_str("    logs)\n");
        script.push_str("        show_logs \"$2\"\n");
        script.push_str("        ;;\n");
        script.push_str("    cleanup)\n");
        script.push_str("        stop_containers\n");
        script.push_str("        cleanup_old_networks\n");
        script.push_str("        ;;\n");
        script.push_str("    help|--help|-h)\n");
        script.push_str("        show_help\n");
        script.push_str("        ;;\n");
        script.push_str("    *)\n");
        script.push_str("        log_error \"Unknown command: $1\"\n");
        script.push_str("        show_help\n");
        script.push_str("        exit 1\n");
        script.push_str("        ;;\n");
        script.push_str("esac\n");
        
        Ok(script)
    }
}