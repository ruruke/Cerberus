name: Cerberus CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Linting and code quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # オプション: 特定のキーパターンを使用
          shared-key: "cerberus-ci"
          # ターゲットディレクトリのキャッシュ有効
          cache-targets: true
          # 一時的なアーティファクトの削除
          cache-on-failure: true

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy linting
        env:
          RUST_BACKTRACE: 1
        run: |
          echo "Rust version info:"
          rustc --version
          cargo --version
          echo ""
          echo "Step 1: Running Clippy on library..."
          cargo clippy --lib --verbose -- -D warnings
          echo "Step 2: Running Clippy on binary..."
          cargo clippy --bin cerberus --verbose -- -D warnings
          echo "Step 3: Running Clippy on tests..."
          cargo clippy --tests --verbose -- -D warnings
          echo "Step 4: Running Clippy on all targets (warnings only)..."
          cargo clippy --all-targets --all-features --verbose
          echo "Step 5: Running Clippy with -D warnings for full check..."
          cargo clippy --all-targets --all-features --verbose -- -D warnings

      - name: Check TOML syntax  
        run: |
          echo "Checking TOML files..."
          
          find . -name "*.toml" -not -path "./target/*" -not -path "./old-sh/*" -print0 | while IFS= read -r -d '' file; do
            echo "Checking: $file"
            
            # Basic bracket matching check
            open_brackets=$(grep -o '\[' "$file" | wc -l || echo "0")
            close_brackets=$(grep -o '\]' "$file" | wc -l || echo "0")
            
            if [ "$open_brackets" -ne "$close_brackets" ]; then
              echo "❌ Unmatched brackets in $file"
              exit 1
            fi
            
            echo "✅ $file: OK"
          done
          
          echo "All TOML files validated successfully"

  # Unit and integration tests
  test:
    name: ${{ matrix.test_type }}
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - test_type: "Unit Tests"
            test_args: "config"
            timeout: 5
          - test_type: "Docker Compose Generator Tests"
            test_args: "generators::docker_compose"
            timeout: 5
          - test_type: "All Tests"
            test_args: ""
            timeout: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # オプション: 特定のキーパターンを使用
          shared-key: "cerberus-ci"
          # ターゲットディレクトリのキャッシュ有効
          cache-targets: true
          # 一時的なアーティファクトの削除
          cache-on-failure: true

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose curl

      - name: Run tests
        timeout-minutes: ${{ matrix.timeout }}
        run: |
          if [ -n "${{ matrix.test_args }}" ]; then
            echo "Running specific tests: ${{ matrix.test_args }}"
            cargo test ${{ matrix.test_args }} --verbose
          else
            echo "Running all tests"
            cargo test --verbose
          fi

      - name: Test binary compilation
        run: |
          cargo build --release
          ./target/release/cerberus --help

  # Configuration pattern validation
  config_patterns:
    name: Configuration Pattern Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # オプション: 特定のキーパターンを使用
          shared-key: "cerberus-ci"
          # ターゲットディレクトリのキャッシュ有効
          cache-targets: true
          # 一時的なアーティファクトの削除
          cache-on-failure: true

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Cerberus
        run: cargo build --release

      - name: Test Rust configuration patterns
        run: |
          echo "Testing comprehensive Rust configuration patterns..."
          
          # Test 1: Minimal configuration
          echo "Creating minimal configuration test..."
          cat > test-minimal.toml << 'EOF'
          [project]
          name = "ci-test-minimal"
          scaling = false
          
          [[proxies]]
          name = "test-proxy"
          proxy_type = "caddy"
          external_port = 80
          upstream = "http://test-service:3000"
          
          [[services]]
          name = "test-service"
          domain = "test.example.com"
          upstream = "http://192.0.2.1:3000"
          EOF
          
          echo "Validating minimal configuration..."
          ./target/release/cerberus validate -c test-minimal.toml
          
          echo "Generating from minimal configuration..."
          ./target/release/cerberus generate -c test-minimal.toml
          
          # Test 2: Complex configuration with Anubis
          echo "Creating complex configuration test..."
          cat > test-complex.toml << 'EOF'
          [project]
          name = "ci-test-complex"
          scaling = true
          
          [anubis]
          enabled = true
          bind = ":8080"
          target = "http://proxy-layer2:80"
          difficulty = 5
          metrics_bind = ":9090"
          
          [[proxies]]
          name = "proxy-layer1"
          proxy_type = "caddy"
          external_port = 80
          upstream = "http://anubis:8080"
          instances = 2
          
          [[proxies]]
          name = "proxy-layer2"
          proxy_type = "caddy"
          external_port = 8080
          upstream = "http://backend-services"
          instances = 3
          
          [[services]]
          name = "misskey"
          domain = "mi.example.com"
          upstream = "http://192.0.2.1:3000"
          
          [[services]]
          name = "media-proxy"
          domain = "media.example.com"
          upstream = "http://192.0.2.1:12766"
          EOF
          
          echo "Validating complex configuration..."
          ./target/release/cerberus validate -c test-complex.toml
          
          echo "Generating from complex configuration..."
          ./target/release/cerberus generate -c test-complex.toml
          
          # Test 3: Error handling
          echo "Testing error handling..."
          cat > test-invalid.toml << 'EOF'
          [project]
          # Missing name field - should cause validation error
          
          [[proxies]]
          # Missing required fields - should cause validation error
          EOF
          
          echo "Testing invalid configuration (should fail)..."
          if ./target/release/cerberus validate -c test-invalid.toml; then
            echo "ERROR: Invalid config should have failed validation!"
            exit 1
          else
            echo "✅ Correctly detected invalid configuration"
          fi
          
          echo "✅ All Rust configuration pattern tests completed successfully"

  # Docker Compose generation validation
  docker_validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # オプション: 特定のキーパターンを使用
          shared-key: "cerberus-ci"
          # ターゲットディレクトリのキャッシュ有効
          cache-targets: true
          # 一時的なアーティファクトの削除
          cache-on-failure: true

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Cerberus
        run: cargo build --release

      - name: Test Rust Docker Compose generation
        run: |
          echo "Testing comprehensive Docker Compose generation with Rust..."
          
          # Test 1: Full stack with Anubis
          cat > test-docker-full.toml << 'EOF'
          [project]
          name = "docker-test-full"
          scaling = true
          
          [anubis]
          enabled = true
          bind = ":8080"
          target = "http://proxy-layer2:80"
          difficulty = 7
          metrics_bind = ":9090"
          
          [[proxies]]
          name = "proxy-layer1"
          proxy_type = "caddy"
          external_port = 80
          upstream = "http://anubis:8080"
          instances = 2
          
          [[proxies]]
          name = "proxy-layer2"
          proxy_type = "caddy"
          external_port = 8080
          upstream = "http://backend-services"
          instances = 1
          
          [[services]]
          name = "misskey"
          domain = "social.example.com"
          upstream = "http://192.0.2.10:3000"
          
          [[services]]
          name = "media-proxy"
          domain = "media.example.com"
          upstream = "http://192.0.2.10:12766"
          
          [[services]]
          name = "storage"
          domain = "storage.example.com"
          upstream = "http://192.0.2.11:9000"
          EOF
          
          echo "Generating full Docker Compose..."
          ./target/release/cerberus generate -c test-docker-full.toml
          
          # Validate generated Docker Compose syntax
          if [ -f "built/docker-compose.yaml" ]; then
            echo "Validating generated Docker Compose syntax..."
            docker-compose -f built/docker-compose.yaml config --quiet
            echo "✅ Full Docker Compose generated and validated successfully"
            
            # Check for expected services
            echo "Verifying service presence..."
            grep -q "anubis:" built/docker-compose.yaml && echo "✅ Anubis service found"
            grep -q "proxy-layer1" built/docker-compose.yaml && echo "✅ Proxy layer 1 services found"
            grep -q "proxy-layer2" built/docker-compose.yaml && echo "✅ Proxy layer 2 services found"
            
            # Check for scaling (multiple instances)
            proxy1_count=$(grep -c "proxy-layer1" built/docker-compose.yaml)
            if [ "$proxy1_count" -ge 2 ]; then
              echo "✅ Scaling detected: proxy-layer1 has multiple instances"
            fi
          else
            echo "❌ Docker Compose file not generated in built/"
            exit 1
          fi
          
          # Test 2: Minimal setup without Anubis
          cat > test-docker-minimal.toml << 'EOF'
          [project]
          name = "docker-test-minimal"
          scaling = false
          
          [[proxies]]
          name = "simple-proxy"
          proxy_type = "caddy"
          external_port = 80
          upstream = "http://app:3000"
          
          [[services]]
          name = "simple-app"
          domain = "app.example.com"
          upstream = "http://192.0.2.20:3000"
          EOF
          
          echo "Generating minimal Docker Compose..."
          ./target/release/cerberus generate -c test-docker-minimal.toml
          
          if [ -f "built/docker-compose.yaml" ]; then
            echo "Validating minimal Docker Compose..."
            docker-compose -f built/docker-compose.yaml config --quiet
            echo "✅ Minimal Docker Compose generated and validated successfully"
            
            # Should NOT contain Anubis
            if grep -q "anubis:" built/docker-compose.yaml; then
              echo "❌ Anubis found in minimal config (should not be present)"
              exit 1
            else
              echo "✅ Anubis correctly excluded from minimal config"
            fi
          else
            echo "❌ Minimal Docker Compose file not generated"
            exit 1
          fi
          
          echo "✅ All Docker Compose generation tests completed successfully"

      - name: Upload generated artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generated-docker-compose
          path: built/
          retention-days: 7

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "cerberus-security"
          cache-targets: true
          cache-on-failure: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Basic security checks
        run: |
          echo "Running basic security checks..."
          
          # Check for potential security issues in config files
          echo "Checking for potential security issues..."
          
          # Check for hardcoded secrets patterns (excluding test files)
          secrets_found=0
          if grep -r -E "(password|secret|key|token).*=" . \
            --exclude-dir=.git \
            --exclude-dir=target \
            --exclude-dir=old-sh \
            --exclude="*.md" \
            --exclude="*.yml" \
            --exclude="*.yaml" \
            | grep -v "^[[:space:]]*#" \
            | grep -v "example" \
            | grep -v "placeholder" \
            | head -5; then
            secrets_found=1
          fi
          
          if [ $secrets_found -eq 1 ]; then
            echo "⚠️ Potential hardcoded secrets found (review needed)"
          else
            echo "✅ No obvious hardcoded secrets found"
          fi
          
          echo "Security scan completed"

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "cerberus-benchmarks"
          cache-targets: true
          cache-on-failure: true

      - name: Build optimized binary
        run: cargo build --release

      - name: Run Rust performance benchmarks
        run: |
          echo "Running comprehensive Rust performance benchmarks..."
          
          # Benchmark 1: CLI startup time
          echo "Benchmarking CLI startup time..."
          echo "--- Help command performance ---"
          time ./target/release/cerberus --help
          
          echo "--- Version command performance ---"
          time ./target/release/cerberus --version
          
          # Benchmark 2: Configuration processing performance
          echo "Creating performance test configurations..."
          
          # Small config
          cat > perf-small.toml << 'EOF'
          [project]
          name = "perf-small"
          scaling = false
          
          [[proxies]]
          name = "small-proxy"
          proxy_type = "caddy"
          external_port = 80
          upstream = "http://app:3000"
          
          [[services]]
          name = "small-service"
          domain = "small.example.com"
          upstream = "http://192.0.2.1:3000"
          EOF
          
          # Large config with multiple services
          cat > perf-large.toml << 'EOF'
          [project]
          name = "perf-large"
          scaling = true
          
          [anubis]
          enabled = true
          bind = ":8080"
          target = "http://proxy-layer2:80"
          difficulty = 5
          metrics_bind = ":9090"
          
          [[proxies]]
          name = "proxy-layer1"
          proxy_type = "caddy"
          external_port = 80
          upstream = "http://anubis:8080"
          instances = 5
          
          [[proxies]]
          name = "proxy-layer2"
          proxy_type = "caddy"
          external_port = 8080
          upstream = "http://backend-services"
          instances = 3
          EOF
          
          # Add 20 services to test scaling
          for i in {1..20}; do
            cat >> perf-large.toml << EOF
          
          [[services]]
          name = "service-$i"
          domain = "service$i.example.com"
          upstream = "http://192.0.2.$((10 + i)):3000"
          EOF
          done
          
          echo "--- Small configuration validation performance ---"
          time ./target/release/cerberus validate -c perf-small.toml
          
          echo "--- Large configuration validation performance ---"
          time ./target/release/cerberus validate -c perf-large.toml
          
          echo "--- Small configuration generation performance ---"
          time ./target/release/cerberus generate -c perf-small.toml
          
          echo "--- Large configuration generation performance ---"
          time ./target/release/cerberus generate -c perf-large.toml
          
          # Benchmark 3: Memory usage estimation
          echo "--- Memory usage test ---"
          echo "Binary size:"
          ls -lh ./target/release/cerberus
          
          echo "Processing large configuration memory usage:"
          /usr/bin/time -v ./target/release/cerberus generate -c perf-large.toml 2>&1 | grep -E "(Maximum resident set size|User time|System time|Elapsed)"
          
          # Benchmark 4: Concurrent operations
          echo "--- Concurrent validation test ---"
          (
            time ./target/release/cerberus validate -c perf-small.toml &
            time ./target/release/cerberus validate -c perf-large.toml &
            wait
          )
          
          echo "--- Generated file sizes ---"
          if [ -f "built/docker-compose.yaml" ]; then
            wc -l built/docker-compose.yaml
            du -h built/
          fi
          
          echo "✅ All Rust performance benchmarks completed"

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, config_patterns, docker_validation, security, benchmarks]
    if: always()
    steps:
      - name: Summarize results
        run: |
          echo "=== Rust Cerberus CI/CD Pipeline Results ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Config Patterns: ${{ needs.config_patterns.result }}"
          echo "Docker Validation: ${{ needs.docker_validation.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Benchmarks: ${{ needs.benchmarks.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docker_validation.result }}" == "success" ]]; then
            echo "🎉 Core checks passed!"
            exit 0
          else
            echo "❌ Some core checks failed!"
            exit 1
          fi