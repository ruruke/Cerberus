name: Cerberus CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Linting and code quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy linting
        env:
          RUST_BACKTRACE: 1
        run: |
          echo "Rust version info:"
          rustc --version
          cargo --version
          echo ""
          echo "Step 1: Running Clippy on library..."
          cargo clippy --lib --verbose -- -D warnings
          echo "Step 2: Running Clippy on binary..."
          cargo clippy --bin cerberus --verbose -- -D warnings
          echo "Step 3: Running Clippy on tests..."
          cargo clippy --tests --verbose -- -D warnings
          echo "Step 4: Running Clippy on all targets (warnings only)..."
          cargo clippy --all-targets --all-features --verbose
          echo "Step 5: Running Clippy with -D warnings for full check..."
          cargo clippy --all-targets --all-features --verbose -- -D warnings

      - name: Check TOML syntax  
        run: |
          echo "Checking TOML files..."
          
          find . -name "*.toml" -not -path "./target/*" -not -path "./old-sh/*" -print0 | while IFS= read -r -d '' file; do
            echo "Checking: $file"
            
            # Basic bracket matching check
            open_brackets=$(grep -o '\[' "$file" | wc -l || echo "0")
            close_brackets=$(grep -o '\]' "$file" | wc -l || echo "0")
            
            if [ "$open_brackets" -ne "$close_brackets" ]; then
              echo "❌ Unmatched brackets in $file"
              exit 1
            fi
            
            echo "✅ $file: OK"
          done
          
          echo "All TOML files validated successfully"

  # Unit and integration tests
  test:
    name: ${{ matrix.test_type }}
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - test_type: "Unit Tests"
            test_args: "config"
            timeout: 5
          - test_type: "Docker Compose Generator Tests"
            test_args: "generators::docker_compose"
            timeout: 5
          - test_type: "All Tests"
            test_args: ""
            timeout: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose curl

      - name: Run tests
        timeout-minutes: ${{ matrix.timeout }}
        run: |
          if [ -n "${{ matrix.test_args }}" ]; then
            echo "Running specific tests: ${{ matrix.test_args }}"
            cargo test ${{ matrix.test_args }} --verbose
          else
            echo "Running all tests"
            cargo test --verbose
          fi

      - name: Test binary compilation
        run: |
          cargo build --release
          ./target/release/cerberus --help

  # Configuration pattern validation
  config_patterns:
    name: Configuration Pattern Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Cerberus
        run: cargo build --release

      - name: Test configuration patterns
        run: |
          # Test with old shell script comprehensive tests if available
          if [ -f "old-sh/tests/test-all-config-patterns.sh" ]; then
            echo "Running comprehensive configuration pattern tests..."
            cd old-sh
            chmod +x tests/test-all-config-patterns.sh
            timeout 300 ./tests/test-all-config-patterns.sh || echo "Pattern tests completed with warnings"
            cd ..
          fi
          
          # Test basic config validation with Rust version
          echo "Testing basic configuration validation..."
          cat > test-minimal.toml << 'EOF'
          [project]
          name = "ci-test"
          
          [[proxies]]
          name = "test-proxy"
          type = "caddy"
          external_port = 80
          
          [[services]]
          name = "test-service"
          domain = "test.example.com"
          upstream = "http://192.0.2.1:3000"
          EOF
          
          ./target/release/cerberus -c test-minimal.toml validate || echo "Config validation test completed"

  # Docker Compose generation validation
  docker_validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Cerberus
        run: cargo build --release

      - name: Test Docker Compose generation
        run: |
          # Create test configuration
          mkdir -p test-output
          
          cat > test-docker.toml << 'EOF'
          [project]
          name = "docker-test"
          
          [anubis]
          enabled = true
          
          [[proxies]]
          name = "proxy-layer1"
          type = "caddy"
          external_port = 80
          default_upstream = "http://anubis:8080"
          
          [[proxies]]
          name = "proxy-layer2"
          type = "caddy"
          external_port = 80
          
          [[services]]
          name = "test-service"
          domain = "test.example.com"
          upstream = "http://192.0.2.1:3000"
          EOF
          
          # Generate Docker Compose configuration
          ./target/release/cerberus -c test-docker.toml -o test-output generate || echo "Generation completed with warnings"
          
          # Validate generated Docker Compose syntax
          if [ -f "test-output/docker-compose.yaml" ]; then
            echo "Validating generated Docker Compose..."
            docker-compose -f test-output/docker-compose.yaml config --quiet || echo "Docker Compose validation completed with warnings"
            echo "✅ Docker Compose generated successfully"
          else
            echo "❌ Docker Compose file not generated"
            exit 1
          fi

      - name: Upload generated artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generated-docker-compose
          path: test-output/
          retention-days: 7

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Basic security checks
        run: |
          echo "Running basic security checks..."
          
          # Check for potential security issues in config files
          echo "Checking for potential security issues..."
          
          # Check for hardcoded secrets patterns (excluding test files)
          secrets_found=0
          if grep -r -E "(password|secret|key|token).*=" . \
            --exclude-dir=.git \
            --exclude-dir=target \
            --exclude-dir=old-sh \
            --exclude="*.md" \
            --exclude="*.yml" \
            --exclude="*.yaml" \
            | grep -v "^[[:space:]]*#" \
            | grep -v "example" \
            | grep -v "placeholder" \
            | head -5; then
            secrets_found=1
          fi
          
          if [ $secrets_found -eq 1 ]; then
            echo "⚠️ Potential hardcoded secrets found (review needed)"
          else
            echo "✅ No obvious hardcoded secrets found"
          fi
          
          echo "Security scan completed"

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build optimized binary
        run: cargo build --release

      - name: Run basic performance tests
        run: |
          echo "Running basic performance tests..."
          
          # Test configuration loading performance
          time ./target/release/cerberus --help
          
          # Test configuration generation performance with test config
          cat > perf-test.toml << 'EOF'
          [project]
          name = "performance-test"
          
          [[proxies]]
          name = "perf-proxy"
          type = "caddy"
          external_port = 80
          
          [[services]]
          name = "perf-service"
          domain = "perf.example.com"
          upstream = "http://192.0.2.1:3000"
          EOF
          
          echo "Testing configuration validation performance..."
          time ./target/release/cerberus -c perf-test.toml validate || echo "Performance test completed"
          
          echo "✅ Performance tests completed"

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, config_patterns, docker_validation, security, benchmarks]
    if: always()
    steps:
      - name: Summarize results
        run: |
          echo "=== Rust Cerberus CI/CD Pipeline Results ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Config Patterns: ${{ needs.config_patterns.result }}"
          echo "Docker Validation: ${{ needs.docker_validation.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Benchmarks: ${{ needs.benchmarks.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docker_validation.result }}" == "success" ]]; then
            echo "🎉 Core checks passed!"
            exit 0
          else
            echo "❌ Some core checks failed!"
            exit 1
          fi